<?xml version="1.0" encoding="UTF-8"?>

<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
    targetNamespace="http://drools.org/drools-5.2"
    xmlns="http://drools.org/drools-5.2"
    elementFormDefault="qualified"
    attributeFormDefault="unqualified">

  <xs:element name="package">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="import"/>
        <xs:element ref="importfunction"/>
        <xs:element ref="global"/>
        <xs:element ref="function"/>
        <xs:element ref="rule"/>
        <xs:element ref="query"/>
      </xs:choice>
      <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="rule">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" ref="rule-attribute"/>
        <xs:element ref="lhs"/>
        <xs:element ref="rhs"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>
    <!-- All rules must have unique names -->
    <xs:key name="ruleName">
      <xs:selector xpath="rule"/>
      <xs:field xpath="@name"/>
    </xs:key>
  </xs:element>

  <xs:element name="query">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="lhs"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>
    <!-- All rules must have unique names -->
    <xs:key name="queryName">
      <xs:selector xpath="query"/>
      <xs:field xpath="@name"/>
    </xs:key>
  </xs:element>

  <xs:element name="rule-attribute">
    <xs:complexType>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="value" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="import">
    <xs:complexType>
      <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="importfunction">
    <xs:complexType>
      <xs:attribute name="name" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="global">
    <xs:complexType>
      <xs:attribute name="type" type="xs:string" use="required"/>
      <xs:attribute name="identifier" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="function">
    <xs:complexType>
      <xs:sequence>
        <xs:element maxOccurs="unbounded" minOccurs="0" ref="parameter"/>
        <xs:element name="body" type="xs:string"/>
      </xs:sequence>
      <xs:attribute name="name" type="xs:string" use="required"/>
      <xs:attribute name="return-type" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="parameter">
    <xs:complexType>
      <xs:attribute name="type" type="xs:string" use="required"/>
      <xs:attribute name="identifier" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="rhs" type="xs:string"/>

  <xs:element name="lhs">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="and-conditional-element"/>
        <xs:element ref="or-conditional-element"/>
        <xs:element ref="not"/>
        <xs:element ref="exists"/>
        <xs:element ref="pattern"/>
        <xs:element ref="eval"/>
        <xs:element ref="forall"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!--
       Restriction connectives
  -->
  <xs:element name="abstractRestrictionConnective"
      type="restrictionElementType"
      abstract="true"/>

  <xs:element name="abstractConditionalElement"
      type="conditionalElementType"
      abstract="true"/>

  <xs:element name="abstractConstraintConnective"
      type="constraintConnectiveElementType"
      abstract="true"/>

  <xs:complexType name="restrictionElementType">
    <xs:choice maxOccurs="unbounded" minOccurs="0">
      <xs:element ref="literal-restriction" maxOccurs="unbounded"/>
      <xs:element ref="variable-restriction"/>
      <xs:element ref="return-value-restriction"/>
      <xs:element ref="qualified-identifier-restriction"/>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="conditionalElementType">
    <xs:choice maxOccurs="unbounded" minOccurs="0">
      <xs:element ref="not"/>
      <xs:element ref="exists"/>
      <xs:element ref="eval"/>
      <xs:element ref="pattern" maxOccurs="unbounded"/>
      <xs:element ref="and-conditional-element"/>
      <xs:element ref="or-conditional-element"/>
    </xs:choice>
  </xs:complexType>

  <xs:complexType name="constraintConnectiveElementType">
    <xs:choice maxOccurs="unbounded" minOccurs="0">
      <xs:element ref="field-constraint" maxOccurs="unbounded"/>
      <xs:element ref="or-constraint-connective" maxOccurs="unbounded"/>
      <xs:element ref="and-constraint-connective" maxOccurs="unbounded"/>
    </xs:choice>
  </xs:complexType>

  <xs:element name="and-restriction-connective">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="literal-restriction" maxOccurs="unbounded"/>
        <xs:element ref="variable-restriction"/>
        <xs:element ref="return-value-restriction"/>
        <xs:element ref="qualified-identifier-restriction"/>
        <xs:element ref="or-restriction-connective"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="or-restriction-connective">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="literal-restriction" maxOccurs="unbounded"/>
        <xs:element ref="variable-restriction"/>
        <xs:element ref="return-value-restriction"/>
        <xs:element ref="qualified-identifier-restriction"/>
        <xs:element ref="and-restriction-connective"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!--
       Conditional elements
  -->
  <xs:element name="and-conditional-element">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="not"/>
        <xs:element ref="exists"/>
        <xs:element ref="eval"/>
        <xs:element ref="pattern" maxOccurs="unbounded"/>
        <xs:element ref="or-conditional-element"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="or-conditional-element">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="not"/>
        <xs:element ref="exists"/>
        <xs:element ref="eval"/>
        <xs:element ref="pattern" maxOccurs="unbounded"/>
        <xs:element ref="and-conditional-element"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <!--
       Logical connectives
  -->
  <xs:element name="and-constraint-connective">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="field-constraint" maxOccurs="unbounded"/>
        <xs:element ref="or-constraint-connective"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="or-constraint-connective">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="field-constraint" maxOccurs="unbounded"/>
        <xs:element ref="and-constraint-connective"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="not">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="1">
        <xs:element ref="abstractConditionalElement"/>
        <xs:element ref="not"/>
        <xs:element ref="exists"/>
        <xs:element ref="pattern"/>
        <xs:element ref="accumulate"/>
        <xs:element ref="collect"/>
        <xs:element ref="forall"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="exists">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="pattern"/>
        <xs:element ref="abstractConditionalElement"/>
        <xs:element ref="accumulate"/>
        <xs:element ref="collect"/>
        <xs:element ref="forall"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="forall">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="pattern"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="collect">
    <xs:complexType>
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:element ref="pattern"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="expression" type="xs:string"/>

  <xs:element name="expr" type="xs:string"/>

  <xs:group name="accumulate">
    <xs:sequence>
      <xs:choice>
        <xs:element ref="pattern"/>
        <xs:element ref="and-conditional-element"/>
        <xs:element ref="or-conditional-element"/>
      </xs:choice>
      <xs:choice>
        <xs:sequence>
          <xs:element name="init" type="xs:string"/>
          <xs:element name="action" type="xs:string"/>
          <xs:element name="result" type="xs:string"/>
        </xs:sequence>
        <xs:element ref="external-function"/>
      </xs:choice>
    </xs:sequence>
  </xs:group>

  <xs:element name="accumulate">
    <xs:complexType>
      <xs:choice maxOccurs="1" minOccurs="1">
        <xs:group ref="accumulate"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="from">
    <xs:complexType>
      <xs:choice maxOccurs="1">
        <xs:element ref="collect"/>
        <xs:element ref="expression"/>
        <xs:element ref="accumulate"/>
      </xs:choice>
    </xs:complexType>
  </xs:element>

  <xs:element name="eval" type="xs:string"/>

  <xs:element name="pattern">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="field-binding"/>
        <xs:element ref="field-constraint"/>
        <xs:element ref="from"/>
        <xs:element ref="predicate"/>
        <xs:element ref="expr"/>
        <xs:element ref="abstractConstraintConnective"/>
        <xs:element name="or-constraint-connective"/>
        <xs:element name="and-constraint-connective"/>
      </xs:choice>
      <xs:attribute name="field-name" type="xs:string" use="optional"/>
      <xs:attribute name="identifier" type="xs:string" use="optional"/>
      <xs:attribute name="object-type" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="field-constraint">
    <xs:complexType>
      <xs:choice maxOccurs="unbounded" minOccurs="0">
        <xs:element ref="literal-restriction" maxOccurs="unbounded"/>
        <xs:element ref="variable-restriction"/>
        <xs:element ref="return-value-restriction"/>
        <xs:element ref="qualified-identifier-restriction"/>
        <xs:element ref="abstractRestrictionConnective"/>
        <xs:element ref="and-restriction-connective"/>
        <xs:element ref="or-restriction-connective"/>
      </xs:choice>
      <xs:attribute name="field-name" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="field-binding">
    <xs:complexType>
      <xs:attribute name="field-name" type="xs:string" use="required"/>
      <xs:attribute name="identifier" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="literal-restriction">
    <xs:complexType>
      <xs:attribute name="evaluator" type="xs:string" use="required"/>
      <xs:attribute name="value" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="external-function">
    <xs:complexType>
      <xs:attribute name="evaluator" type="xs:string" use="required"/>
      <xs:attribute name="expression" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="variable-restriction">
    <xs:complexType>
      <xs:attribute name="evaluator" type="xs:string" use="required"/>
      <xs:attribute name="identifier" type="xs:string" use="required"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="return-value-restriction">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute name="evaluator" type="xs:string" use="required"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="qualified-identifier-restriction">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute name="evaluator" type="xs:string" use="required"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="predicate">
    <xs:complexType>
      <xs:simpleContent>
        <xs:extension base="xs:string">
          <xs:attribute name="field-name" type="xs:string" use="optional"/>
          <xs:attribute name="identifier" type="xs:string" use="optional"/>
        </xs:extension>
      </xs:simpleContent>
    </xs:complexType>
  </xs:element>

</xs:schema>
